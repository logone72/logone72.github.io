import{_ as s,c as a,o as e,N as n}from"./chunks/framework.67628f14.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"올바르게 Object 상태를 변경하는 방법","slug":"올바르게-object-상태를-변경하는-방법","link":"#올바르게-object-상태를-변경하는-방법","children":[]},{"level":2,"title":"상태의 개체를 업데이트할 때 항상 새 개체를 만들어야하는 이유","slug":"상태의-개체를-업데이트할-때-항상-새-개체를-만들어야하는-이유","link":"#상태의-개체를-업데이트할-때-항상-새-개체를-만들어야하는-이유","children":[{"level":3,"title":"돌연변이 방지","slug":"돌연변이-방지","link":"#돌연변이-방지","children":[]},{"level":3,"title":"얕은 비교","slug":"얕은-비교","link":"#얕은-비교","children":[]},{"level":3,"title":"성능","slug":"성능","link":"#성능","children":[]}]}],"relativePath":"개발/frontend/React/React-상태로-Object를-올바르게-다루는-방법.md"}'),t={name:"개발/frontend/React/React-상태로-Object를-올바르게-다루는-방법.md"},l=n(`<p><a href="https://blog.logrocket.com/using-react-usestate-object/" target="_blank" rel="noreferrer">https://blog.logrocket.com/using-react-usestate-object/</a></p><h2 id="올바르게-object-상태를-변경하는-방법" tabindex="-1">올바르게 Object 상태를 변경하는 방법 <a class="header-anchor" href="#올바르게-object-상태를-변경하는-방법" aria-hidden="true">#</a></h2><p>__예시:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">shopCart</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setShopCart</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> updatedValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">updatedValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">item1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">juice</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#82AAFF;">setShopCart</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">shopCart</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">shopCart</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">updatedValue</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>React에서 state는 불변으로 간주되므로 일단 생성되면 변경할 수 없습니다. 대신 상태를 업데이트하려면 업데이트된 상태를 나타내는 새로운 객체를 만들어야 합니다.</p><p>상태의 개체를 업데이트할 때는 항상 기존 개체를 수정하지 말고 새 개체를 만들어야 합니다. 그 이유는 다음과 같습니다:</p><h2 id="상태의-개체를-업데이트할-때-항상-새-개체를-만들어야하는-이유" tabindex="-1">상태의 개체를 업데이트할 때 항상 새 개체를 만들어야하는 이유 <a class="header-anchor" href="#상태의-개체를-업데이트할-때-항상-새-개체를-만들어야하는-이유" aria-hidden="true">#</a></h2><h3 id="돌연변이-방지" tabindex="-1">돌연변이 방지 <a class="header-anchor" href="#돌연변이-방지" aria-hidden="true">#</a></h3><p>기존 상태 객체를 수정하면 애플리케이션에서 예기치 않은 동작이 발생할 수 있습니다. 예를 들어, 새 상태를 계산하기 위해 이전 상태에 의존하는 컴포넌트가 있는 경우 기존 상태 객체를 수정하면 계산이 잘못될 수 있습니다. 새 객체를 생성하면 이 문제를 방지하고 상태가 항상 일관성을 유지할 수 있습니다.</p><h3 id="얕은-비교" tabindex="-1">얕은 비교 <a class="header-anchor" href="#얕은-비교" aria-hidden="true">#</a></h3><p><strong>React는 얕은 비교 알고리즘을 사용해 컴포넌트를 다시 렌더링할지 여부를 결정합니다.</strong> 즉, state 객체의 참조만 비교하고 그 내용은 비교하지 않습니다. 기존 state 객체를 수정하면 참조는 동일하게 유지되고 React가 변경 사항을 감지하지 못해 잘못된 렌더링이 발생할 수 있습니다. 새 객체를 생성하면 React가 변경 사항을 감지하고 다시 렌더링을 트리거하도록 할 수 있습니다.</p><h3 id="성능" tabindex="-1">성능 <a class="header-anchor" href="#성능" aria-hidden="true">#</a></h3><p><strong>새 객체를 생성하는 것은 비용이 많이 드는 작업처럼 보일 수 있지만 실제로는 매우 효율적입니다.</strong> 최신 자바스크립트 엔진은 새 객체를 생성하는 데 최적화되어 있으며 매우 빠르게 생성할 수 있습니다. 실제로 새 객체를 생성하면 전체 객체를 복사하는 오버헤드를 피할 수 있기 때문에 기존 객체를 수정하는 것보다 더 빠른 경우가 많습니다.</p><p>요약하자면, React에서 state를 업데이트할 때 새 객체를 생성하는 것은 애플리케이션이 올바르게 작동하고 효율적으로 작동하도록 하는 데 중요합니다. 또한 추적하기 어려운 미묘한 버그를 피하는 데 도움이 됩니다.</p><p>-- created by ChatGpt (wow)</p>`,15),o=[l];function p(c,r,i,D,d,C){return e(),a("div",null,o)}const A=s(t,[["render",p]]);export{h as __pageData,A as default};
