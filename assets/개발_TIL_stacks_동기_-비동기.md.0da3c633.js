import{_ as e,c as a,o as t,N as r}from"./chunks/framework.820fbdb1.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"요약","slug":"요약","link":"#요약","children":[{"level":3,"title":"동기:","slug":"동기","link":"#동기","children":[]},{"level":3,"title":"비동기:","slug":"비동기","link":"#비동기","children":[]}]},{"level":2,"title":"개요","slug":"개요","link":"#개요","children":[{"level":3,"title":"블로킹, 논블로킹","slug":"블로킹-논블로킹","link":"#블로킹-논블로킹","children":[]}]}],"relativePath":"개발/TIL/stacks/동기,-비동기.md"}'),l={name:"개발/TIL/stacks/동기,-비동기.md"},i=r('<h2 id="요약" tabindex="-1">요약 <a class="header-anchor" href="#요약" aria-hidden="true">#</a></h2><h3 id="동기" tabindex="-1">동기: <a class="header-anchor" href="#동기" aria-hidden="true">#</a></h3><ul><li>동기 방식은 현재 작업의 응답과 다음 작업의 요청의 타이밍을 맞추는 방식이다 (순차진행)</li></ul><h3 id="비동기" tabindex="-1">비동기: <a class="header-anchor" href="#비동기" aria-hidden="true">#</a></h3><ul><li>작업을 지시하고나면 그 작업이 언제 끝나는 지는 신경쓰지않는다.</li></ul><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-hidden="true">#</a></h2><p>동기, 비동기의 개념을 처음 접했을 때는 js의 promise도 모를 때 였다. 어렴풋한 코드에 대한 인상으로는 모든 로직은 순차적으로 진행될 것이라 생각했다. 그리고 어느정도 코딩을 학습하고 났을 때에도, 동기 비동기 자체에 대한 깊은 이해 없이도 충분히 개발을 진행 할 수 있다고 생각했다.</p><p>실무에 뛰어든지 반년이 지난 지금, 동기, 비동기는 계속해서 작업 과정에서 튀어나오고, 동료와 소통을 할 때도 이 단어가 사용된다. 따라서 어렴풋한 이해 상태를, 뚜렷하게 만들어야겠다는 필요성을 느껴 이 포스트를 작성해 본다.</p><p><a href="https://evan-moon.github.io/2019/09/19/sync-async-blocking-non-blocking/#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B3%B5%ED%95%99%EC%97%90%EC%84%9C%EC%9D%98-%EB%8F%99%EA%B8%B0" target="_blank" rel="noreferrer">동기, 비동기란?</a></p><p>위 포스트에서는</p><p><code>동기</code> 란 <strong>현재 작업의 응답과, 다음 작업의 요청</strong> 이 <code>동시에</code> 일어나는 상황이라고 정리했다.</p><p>나라면 아래와 같이 정리할 것이다.</p><blockquote><p><code>동기</code>란 <code>순차</code> 라고 부르고, <code>순차</code>의 순서는 <code>상위 프로세스</code> (작업의 단위) 가 관리한다</p></blockquote><h3 id="블로킹-논블로킹" tabindex="-1">블로킹, 논블로킹 <a class="header-anchor" href="#블로킹-논블로킹" aria-hidden="true">#</a></h3><p>동기, 비동기를 더욱 세분화해주는 공통되는 개념인데, 말그대로 동기, 비동기를 수행할 때 다른 프로세스를 막냐 안 막냐의 차이다.</p><p>동기 블로킹은 상위 프로세스가 하위 프로세스의 동작이 끝날 때 까지 어떠한 작업도 하지 않는 것이고, 동기 논블로킹은, 하위 프로세스가 종료가 되기 전에도 상위 프로세스는 동작을 한다. (물론 상위 프로세스의 종료시점은 무조건 하위 프로세스의 종료시점 이후이다. 그것이 동기... 이기에)</p>',16),n=[i];function c(d,o,s,h,_,p){return t(),a("div",null,n)}const k=e(l,[["render",c]]);export{f as __pageData,k as default};
